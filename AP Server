#include <SPI.h>
#include <WiFi.h>

char ssid[] = "GIGA";  
char pass[] = "gigagiga";
int status = WL_IDLE_STATUS;
WiFiServer server(80);
//comment
void setup() {
  
  Serial.begin(9600);//Initialize serial and wait for port to open:
  while (!Serial);  // wait for serial port to connect. Needed for native USB port only
  Serial.println("Access Point Web Server");

  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);

  if (WiFi.status() == WL_NO_MODULE) { // check for the WiFi module
    Serial.println("Communication with WiFi module failed!");
    while (true);
  }

  Serial.print("Creating access point named: ");
  Serial.println(ssid);

  if ((status = WiFi.beginAP(ssid, pass)) != WL_AP_LISTENING) {
    Serial.println("Creating access point failed");
    while (true);
  }
  delay(10000); // wait 10 seconds for connection
  server.begin(); // start the web server on port 80
  printWiFiStatus();
}


void loop() {
  
  if (status != WiFi.status()) // compare the previous status to the current status
    (status = WiFi.status()) == WL_AP_CONNECTED?
    Serial.println("Device connected to AP"):
    Serial.println("Device disconnected from AP");

  WiFiClient client = server.available();  // listen for incoming clients

  if (client) {                    // if you get a client,
    Serial.println("new client");  // print a message out the serial port
    String currentLine = "";       // make a String to hold incoming data from the client
    while (client.connected()) {   // loop while the client's connected
      delayMicroseconds(10);       // This is required for the Arduino Nano RP2040 Connect - otherwise it will loop so fast that SPI will never be served.
      if (client.available()) {    // if there's bytes to read from the client,
        char c = client.read();    // read a byte, then
        Serial.write(c);           // print it out the serial monitor
        if (c == '\n')           // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (!currentLine.length()) {
            client.println("HTTP/1.1 200 OK"); // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            client.println("Content-type:text/html"); // and a content-type so the client knows what's coming, then a blank line
            client.println();
            client.println("SERVER ON");
            client.println();// The HTTP response ends with another blank line
            break; // break out of the while loop
          } else currentLine = "";// if you got a newline, then clear currentLine
        else if (c != '\r') currentLine += c;      // if you got anything else but a carriage return character add it to the end of the currentLine

        //These are for the app
        if (currentLine.endsWith("GET /prVerse")) { digitalWrite(LED_RED, LOW); digitalWrite(LED_BLUE, LOW); } 
        if (currentLine.endsWith("GET /rrVerse")) { digitalWrite(LED_RED, HIGH); digitalWrite(LED_BLUE, HIGH); }
        if (currentLine.endsWith("GET /prWards"))   digitalWrite(LED_BLUE, LOW);
        if (currentLine.endsWith("GET /rrWards"))   digitalWrite(LED_BLUE, HIGH);
        if (currentLine.endsWith("GET /plRever")) { digitalWrite(LED_RED, LOW); digitalWrite(LED_GREEN, LOW); } 
        if (currentLine.endsWith("GET /rlRever")) { digitalWrite(LED_RED, HIGH); digitalWrite(LED_GREEN, HIGH); }
        if (currentLine.endsWith("GET /plForwa"))   digitalWrite(LED_GREEN, LOW);  
        if (currentLine.endsWith("GET /rlForwa"))   digitalWrite(LED_GREEN, HIGH);
      }
    }
    client.stop();// close the connection:
    Serial.println("client disconnected");
  }
}

void printWiFiStatus() {
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}
